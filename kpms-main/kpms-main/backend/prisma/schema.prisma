generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model emergency_contacts {
  emergency_contact_id  Int      @id @default(autoincrement())
  name                  String   @db.NVarChar(255)
  relationship          String?  @db.NVarChar(100)
  contact_number        String   @db.NVarChar(20)

  patient_id            String   @unique @db.NVarChar(50)
  patient               patients @relation(fields: [patient_id], references: [patient_id])
}

model patients {
  patient_id              String   @id @db.NVarChar(50)
  hospital_patient_id     String?  @db.NVarChar(50)
  password                String   @db.NVarChar(255)
  name                    String   @db.NVarChar(255)
  profile_picture         String?  @db.NVarChar(500)
  email                   String   @unique @db.NVarChar(255)
  phone_number            String?  @db.NVarChar(20)
  address                 String?  @db.NVarChar(500)
  nic                     String?  @unique @db.NVarChar(20)
  blood_group             String?  @db.NVarChar(10)
  date_of_birth           DateTime?
  gender                  String?  @db.NVarChar(10)

  emergency_contact       emergency_contacts?

  appointments            appointments[]
  appointment_histories   appointment_history[]
  soap_notes              soap_notes[]
  medical_reports         medical_reports[]
  medical_histories       medical_history[]
  security_answers        patient_security_question_answers[]
  insurance_detail        insurance_details?
  studies                 study[]

  @@index([email])
  @@index([nic])
}

model dentists {
  dentist_id              String   @id @db.NVarChar(50)
  password                String   @db.NVarChar(255)
  name                    String   @db.NVarChar(255)
  profile_picture         String?  @db.NVarChar(500)
  email                   String   @unique @db.NVarChar(255)
  phone_number            String?  @db.NVarChar(20)
  language                String?  @db.NVarChar(50)
  service_types           String?  @db.NVarChar(500)
  work_days_from          String?  @db.NVarChar(20)
  work_days_to            String?  @db.NVarChar(20)
  work_time_from          String?  @db.NVarChar(10)
  work_time_to            String?  @db.NVarChar(10)
  appointment_duration    String?  @db.NVarChar(10)
  appointment_fee         Decimal? @db.Decimal(10,2)

  appointments            appointments[]
  appointment_histories   appointment_history[]
  soap_notes              soap_notes[]
  blocked_dates           blocked_dates[]
  security_answers        dentist_security_question_answers[]
  dentistAssigns          DentistAssign[]

  @@index([email])
}

model receptionists {
  receptionist_id         String   @id @db.NVarChar(50)
  password                String   @db.NVarChar(255)
  name                    String   @db.NVarChar(255)
  email                   String   @unique @db.NVarChar(255)
  phone_number            String?  @db.NVarChar(20)

  security_answers        receptionist_security_question_answers[]

  @@index([email])
}

model admins {
  admin_id                String   @id @default(cuid()) @db.NVarChar(200)
  password                String   @db.NVarChar(200)
}

model appointments {
  appointment_id          Int      @id @default(autoincrement())
  patient_id              String?  @db.NVarChar(50)
  dentist_id              String?  @db.NVarChar(50)
  date                    DateTime
  time_from               String   @db.NVarChar(10)
  time_to                 String   @db.NVarChar(10)
  fee                     Decimal? @db.Decimal(10,2)
  note                    String?  @db.NVarChar(1000)
  status                  String?  @db.NVarChar(50)
  payment_status          String?  @db.NVarChar(50)

  patient                 patients?  @relation(fields: [patient_id], references: [patient_id])
  dentist                 dentists?  @relation(fields: [dentist_id], references: [dentist_id])
  payment_history         payment_history?

  @@index([date])
  @@index([patient_id])
  @@index([dentist_id])
}

model appointment_history {
  appointment_history_id  Int      @id @default(autoincrement())
  patient_id              String   @db.NVarChar(50)
  dentist_id              String   @db.NVarChar(50)
  date                    DateTime?
  time_from               String?  @db.NVarChar(10)
  time_to                 String?  @db.NVarChar(10)
  fee                     Decimal? @db.Decimal(10,2)
  note                    String?  @db.NVarChar(1000)

  patient                 patients  @relation(fields: [patient_id], references: [patient_id])
  dentist                 dentists  @relation(fields: [dentist_id], references: [dentist_id])

  @@index([patient_id])
  @@index([dentist_id])
}

model soap_notes {
  note_id                 Int      @id @default(autoincrement())
  dentist_id              String   @db.NVarChar(50)
  patient_id              String   @db.NVarChar(50)
  note                    String   @db.NVarChar(4000)
  date                    DateTime

  dentist                 dentists  @relation(fields: [dentist_id], references: [dentist_id])
  patient                 patients  @relation(fields: [patient_id], references: [patient_id])

  @@index([patient_id])
  @@index([dentist_id])
  @@index([date])
}

model payment_history {
  appointment_id          Int      @id
  payment_date            String?  @db.NVarChar(10)
  payment_time            String?  @db.NVarChar(10)
  reference_number        String?  @db.NVarChar(100)

  appointment             appointments @relation(fields: [appointment_id], references: [appointment_id])
}

model service_types {
  service_type_id         Int      @id @default(autoincrement())
  service_type            String   @db.NVarChar(255)
}

model blocked_dates {
  blocked_date_id         Int      @id @default(autoincrement())
  dentist_id              String   @db.NVarChar(50)
  date                    DateTime
  time_from               String?  @db.NVarChar(10)
  time_to                 String?  @db.NVarChar(10)

  dentist                 dentists  @relation(fields: [dentist_id], references: [dentist_id])

  @@index([dentist_id])
  @@index([date])
}

model medical_reports {
  report_id               Int      @id @default(autoincrement())
  patient_id              String   @db.NVarChar(50)
  record_url              String   @db.NVarChar(1000)
  record_name             String   @db.NVarChar(255)

  patient                 patients  @relation(fields: [patient_id], references: [patient_id])

  @@index([patient_id])
}

model medical_questions {
  medical_question_id     Int      @id @default(autoincrement())
  question                String   @db.NVarChar(1000)

  medical_histories       medical_history[]
}

model medical_history {
  patient_id              String   @db.NVarChar(50)
  medical_question_id     Int
  medical_question_answer String?  @db.NVarChar(1000)

  patient                 patients          @relation(fields: [patient_id], references: [patient_id])
  question                medical_questions @relation(fields: [medical_question_id], references: [medical_question_id])

  @@id([patient_id, medical_question_id])
}

model email_verifications {
  email                   String   @id @db.NVarChar(255)
  code                    String   @db.NVarChar(10)
}

model security_questions {
  security_question_id    Int      @id @default(autoincrement())
  question                String   @db.NVarChar(500)

  patient_answers         patient_security_question_answers[]
  dentist_answers         dentist_security_question_answers[]
  receptionist_answers    receptionist_security_question_answers[]
  radiologist_answers     radiologist_security_question_answers[]
}

model patient_security_question_answers {
  patient_id              String   @db.NVarChar(50)
  security_question_id    Int
  answer                  String   @db.NVarChar(500)

  patient                 patients          @relation(fields: [patient_id], references: [patient_id])
  question                security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([patient_id, security_question_id])
}

model dentist_security_question_answers {
  dentist_id              String   @db.NVarChar(50)
  security_question_id    Int
  answer                  String   @db.NVarChar(500)

  dentist                 dentists          @relation(fields: [dentist_id], references: [dentist_id])
  question                security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([dentist_id, security_question_id])
}

model receptionist_security_question_answers {
  receptionist_id         String   @db.NVarChar(50)
  security_question_id    Int
  answer                  String   @db.NVarChar(500)

  receptionist            receptionists      @relation(fields: [receptionist_id], references: [receptionist_id])
  question                security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([receptionist_id, security_question_id])
}

model radiologist_security_question_answers {
  radiologist_id          String   @db.NVarChar(50)
  security_question_id    Int
  answer                  String   @db.NVarChar(500)

  radiologist             radiologists       @relation(fields: [radiologist_id], references: [radiologist_id])
  question                security_questions @relation(fields: [security_question_id], references: [security_question_id])

  @@id([radiologist_id, security_question_id])
}

model insurance_details {
  provider_name           String?  @db.NVarChar(255)
  policy_number           String?  @db.NVarChar(100)
  patient_id              String   @id @db.NVarChar(50)

  patient                 patients @relation(fields: [patient_id], references: [patient_id])
}

model study {
  study_id          Int         @id @default(autoincrement())
  patient_id        String      @db.NVarChar(50)
  radiologist_id    String?     @db.NVarChar(50)
  date              DateTime
  time              String      @db.NVarChar(10)
  modality          String?     @db.NVarChar(100)
  report_id         Int?
  assertion_number  Int?
  description       String?     @db.NVarChar(1000)
  source            String?     @db.NVarChar(255)
  isurgent          Boolean     @default(false)
  dicom_file_url    String?     @db.NVarChar(1000)
  body_part         String?     @db.NVarChar(100)
  reason            String?     @db.NVarChar(500)
  status            String?     @db.NVarChar(50)

  // Relations
  patient           patients      @relation(fields: [patient_id], references: [patient_id])
  radiologist       radiologists? @relation(fields: [radiologist_id], references: [radiologist_id])
  report            reports?      @relation(fields: [report_id], references: [report_id])
  dentistAssigns    DentistAssign[]

  @@index([patient_id])
  @@index([radiologist_id])
  @@index([date])
}

model reports {
  report_id       Int     @id @default(autoincrement())
  status          String  @db.NVarChar(50)
  report_file_url String? @db.NVarChar(1000)

  // Relations
  studies         study[]
  
  @@map("reports")
}

model radiologists {
  radiologist_id  String      @id @db.NVarChar(50)
  password        String      @db.NVarChar(255)
  name            String      @db.NVarChar(255)
  profile_picture String?     @db.NVarChar(500)
  email           String      @unique @db.NVarChar(255)
  phone_number    String?     @db.NVarChar(20)

  // Relations
  studies         study[]
  security_answers        radiologist_security_question_answers[]

  @@index([email])
  @@map("radiologists")
}

model DentistAssign {
  study_id    Int
  dentist_id  String   @db.NVarChar(50)

  // Relations
  study       study      @relation(fields: [study_id], references: [study_id])
  dentist     dentists   @relation(fields: [dentist_id], references: [dentist_id])

  @@id([study_id, dentist_id])
  @@map("dentist_assign")
}